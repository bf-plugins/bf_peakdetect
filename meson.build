
# Bifrost wrapper file
project('bf_peakdetect', 'cpp', 'cuda', version: '0.1.0')

plugin_name = 'bf_peakdetect'
cc = meson.get_compiler('cpp')

# Projects setup
add_project_arguments(['-g', '-std=c++14'], language : ['c', 'cpp', 'cuda'])
c_std = 'c++14'
buildtype = 'debug'
cc = meson.get_compiler('cpp')
builddir = meson.project_build_root()
incdir = include_directories('include')

boost_dep   = dependency('boost')
doctest_dep = dependency('doctest') # Subproject for unit test

# Dependency: bifrost
bf_dep = dependency('bifrost')
bifrost_src_path = '/home/dancpr/software/bifrost/src'
bifrost_lib_path = '/home/dancpr/software/bifrost/src/../lib'

bf_include = include_directories(
    bifrost_src_path, 
    bifrost_src_path / 'bifrost', 
    bifrost_src_path / 'cuda'
    )

srcs = [
 'src/fof.cc',
 'src/fof_brute.cc'
]

# Generate python wrapper from .h file
if get_option('generate_wrapper')
  # Generate python wrapper from .h file
  message('Generating ctypes wrappers')
  srcs_str = ' '.join(srcs)
  r = run_command('./generate_wrapper.py', srcs, 
                  '-l', bifrost_lib_path,
                  '-n', plugin_name,
                  '-s', bifrost_src_path,
                  '-b', builddir,
                  check: true)
  message(r.stdout().strip())
endif 

# Compile into shared object
lib_peakdetect = library('peaktest', ['src/peakdetect.cc', 'src/fof.cc', 'src/fof_brute.cc'], 
                 dependencies: [bf_dep, boost_dep],
                 include_directories: ['src', incdir])

# Python install
#py_mod = import('python')
#py3 = py_mod.find_installation()
#py3_dep = py3.dependency()

python_sources = [
  'pythonsrc/__init__.py',
  #'pythonsrc/lib_bf_peakdetect_wrapper.py',  # This is generated by generate_wrapper.py
]
python_sources_blocks =  [
  'pythonsrc/blocks/__init__.py'
]

#py3.install_sources(python_sources, subdir: plugin_name)
#py3.install_sources(python_sources_blocks, subdir: plugin_name + '/blocks')

# Generate shared object
#py3.extension_module(plugin_name, srcs,  
#              dependencies: [bf_dep, boost_dep], include_directories: bf_include, 
#              subdir: plugin_name,
#              install: true)


# meson will try to find a meson.build file inside following directories
subdir('include')
subdir('testbench')